# Versão final e otimizada do sync_single_vm.yml

- name: Verificar se JSON da VM {{ vm_name }} existe
  stat:
    path: "{{ playbook_dir }}/vm_data/{{ vm_name | lower | replace('_', '-') }}.json"
  register: json_stat

- name: Pular VM se JSON não existir
  meta: end_host
  when: not json_stat.stat.exists

- name: Ler e decodificar JSON da VM
  slurp:
    src: "{{ playbook_dir }}/vm_data/{{ vm_name | lower | replace('_', '-') }}.json"
  register: vm_json_raw

- name: Setar variáveis do JSON
  set_fact:
    vm_meta: "{{ vm_json_raw.content | b64decode | from_json }}"
    site_slug: "{{ vm_meta.datacenter | lower | replace(' ', '-') }}"

- name: Criar site no NetBox
  netbox.netbox.netbox_site:
    netbox_url: "{{ netbox_url }}"
    netbox_token: "{{ netbox_token }}"
    data:
      name: "{{ vm_meta.datacenter }}"
      slug: "{{ site_slug }}"
    state: present

- name: Criar tipo de cluster VMware
  netbox.netbox.netbox_cluster_type:
    netbox_url: "{{ netbox_url }}"
    netbox_token: "{{ netbox_token }}"
    data:
      name: VMware
      slug: vmware
    state: present

- name: Obter cluster
  uri:
    url: "{{ netbox_url }}/api/virtualization/clusters/?name={{ vm_meta.cluster | urlencode }}"
    headers:
      Authorization: "Token {{ netbox_token }}"
    method: GET
    return_content: yes
    validate_certs: false
  register: cluster_check

- name: Criar cluster se não existir
  netbox.netbox.netbox_cluster:
    netbox_url: "{{ netbox_url }}"
    netbox_token: "{{ netbox_token }}"
    data:
      name: "{{ vm_meta.cluster }}"
      site: "{{ vm_meta.datacenter }}"
      cluster_type: VMware
    state: present
  when: cluster_check.json.count == 0

- name: Criar/atualizar VM
  netbox.netbox.netbox_virtual_machine:
    netbox_url: "{{ netbox_url }}"
    netbox_token: "{{ netbox_token }}"
    data:
      name: "{{ vm_meta.name }}"
      vcpus: "{{ vm_meta.vcpus | int }}"
      memory: "{{ (vm_meta.memory | float / 1024) | round(0, 'floor') | int }}"
      disk: "{{ vm_meta.disk | float | round(0, 'floor') | int }}"
      cluster: "{{ vm_meta.cluster }}"
      site: "{{ vm_meta.datacenter }}"
      status: "{{ vm_meta.status }}"
    state: present

- name: Preparar interfaces com IPs
  set_fact:
    interfaces_com_ip: >-
      {{ vm_meta.interfaces | default([])
         | selectattr('ipaddresses', 'defined')
         | selectattr('ipaddresses', '!=', '')
         | selectattr('ipaddresses', '!=', [])
         | list }}

- name: Criar interfaces (com MAC)
  loop: "{{ interfaces_com_ip }}"
  loop_control:
    loop_var: iface
  netbox.netbox.netbox_vm_interface:
    netbox_url: "{{ netbox_url }}"
    netbox_token: "{{ netbox_token }}"
    data:
      virtual_machine: "{{ vm_meta.name }}"
      name: "{{ iface.name }}"
      enabled: true
      mac_address: "{{ iface.macaddress }}"
    state: present
  when: interfaces_com_ip | length > 0

- name: Obter interfaces da VM no NetBox
  uri:
    url: "{{ netbox_url }}/api/virtualization/interfaces/?virtual_machine={{ vm_meta.name | urlencode }}"
    headers:
      Authorization: "Token {{ netbox_token }}"
    method: GET
    return_content: yes
    validate_certs: false
  register: vm_interfaces
  when: interfaces_com_ip | length > 0

- name: Processar e associar IPs
  block:
    - name: Inicializar mapeamento IP ↔ interface
      set_fact:
        ip_interface_map: []

    - name: Verificar e criar IPs
      loop: "{{ query('subelements', interfaces_com_ip, 'ipaddresses') }}"
      vars:
        iface_name: "{{ item.0.name }}"
        ip_addr: "{{ item.1 }}{{ '/128' if ':' in item.1 else '/32' }}"
      block:
        - name: Obter IP no NetBox
          uri:
            url: "{{ netbox_url }}/api/ipam/ip-addresses/?address={{ ip_addr }}"
            headers:
              Authorization: "Token {{ netbox_token }}"
            method: GET
            return_content: yes
            validate_certs: false
          register: ip_lookup

        - name: Criar IP se não existir
          netbox.netbox.netbox_ip_address:
            netbox_url: "{{ netbox_url }}"
            netbox_token: "{{ netbox_token }}"
            data:
              address: "{{ ip_addr }}"
              status: active
            state: present
          when: ip_lookup.json.count == 0

        - name: Registrar mapeamento IP ↔ interface
          set_fact:
            ip_interface_map: "{{ ip_interface_map + [ {'ip_id': ip_id, 'iface_id': iface_id} ] }}"
          vars:
            ip_id: >-
              {{ (ip_lookup.json.results[0].id
                  if ip_lookup.json.count > 0 else
                  lookup('netbox.netbox.nb_lookup', 'ip-addresses', terms=ip_addr, api_endpoint=netbox_url, token=netbox_token)[0].id) }}
            iface_id: >-
              {{ vm_interfaces.json.results
                 | selectattr('name', 'equalto', iface_name)
                 | map(attribute='id')
                 | first }}

    - name: Associar IPs às interfaces
      uri:
        url: "{{ netbox_url }}/api/ipam/ip-addresses/{{ item.ip_id }}/"
        method: PATCH
        headers:
          Authorization: "Token {{ netbox_token }}"
          Content-Type: application/json
        body_format: json
        body:
          assigned_object_type: virtualization.vminterface
          assigned_object_id: "{{ item.iface_id }}"
        status_code: [200, 204]
      loop: "{{ ip_interface_map }}"
      when: ip_interface_map | length > 0

- name: Ajustar IP primário na VM
  uri:
    url: "{{ netbox_url }}/api/virtualization/virtual-machines/?name={{ vm_meta.name | urlencode }}"
    headers:
      Authorization: "Token {{ netbox_token }}"
    method: GET
    return_content: yes
    validate_certs: false
  register: vm_lookup

- name: Atualizar IPs primários da VM
  uri:
    url: "{{ netbox_url }}/api/virtualization/virtual-machines/{{ vm_lookup.json.results[0].id }}/"
    method: PATCH
    headers:
      Authorization: "Token {{ netbox_token }}"
      Content-Type: application/json
    body_format: json
    body:
      primary_ip4: "{{ ip_interface_map | map(attribute='ip_id') | list | first | default(omit) }}"
    status_code: [200, 204]
  when: vm_lookup.json.results | length > 0 and ip_interface_map | length > 0
